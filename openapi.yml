openapi: 3.0.3
info:
  title: Verwaltungscloud Antragsportal
  description: |-
    Das Verwaltungscloud Antragsportal ermöglicht das Stellen von Onlineanträgen für integrierte Fachverfahren.
    
  contact:
    email: info@verwaltungscloud.sh
  version: 0.0.1

servers:
  - url: https://api.antrag.dev.verwaltungs.cloud/v1
tags:
  - name: health
    description: Healthchecks
    
  - name: receivers
    description: application receiving entities
    
  - name: transactionschemas
    description: schemas for transactions
    
  - name: transactions
    description: transactions
    
paths:
  # healthchecks
  /health:
    get: 
      tags:
        - health
      summary: Healthcheck on the Backend Service
      operationId: getHealth
      responses:
        200:
          $ref: '#/components/responses/HealthcheckOK'
          
  /health/mongodbconnection:
    get: 
      tags:
        - health
      summary: Healthcheck on the MongoDB Connection
      description: checks if the backend service is connected to the MongoDB
      operationId: getHealthMongoDB
      responses:
        200:
          $ref: '#/components/responses/HealthcheckOK'
  
  /health/gotenberg:
    get: 
      tags:
        - health
      summary: Healthcheck on the Gotenberg Service
      description: check if the Gotenberg service (PDF rendering engine) is up and reachable
      operationId: getHealthGotenberg
      responses:
        200:
          $ref: '#/components/responses/HealthcheckOK'
          

  # receivers
  /receivers:
    get: 
      tags: 
        - receivers
      summary: query receivers (odatafy enabled)
      description: Queries receivers.<br>Route is odatafy compatible. <br>Documentation and examples can be found <a href=http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_QueryOptions>here</a>.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReceiverPublic'
                  count: 
                    $ref: '#/components/schemas/OdatafyCount'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
          

  /transactionschemas/metadata:
    get: 
      tags: 
        - transactionschemas
      summary: query transactionschemas (odatafy enabled)
      description: Queries transactionschemas.<br>Route is odatafy compatible. <br>Documentation and examples can be found <a href=http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_QueryOptions>here</a>.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransactionSchemaMetadata'
                  count: 
                    $ref: '#/components/schemas/OdatafyCount'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
          
  /transactionschemas/{transactionSchemaAlias}/metadata:
    get: 
      tags: 
        - transactionschemas
      summary: get transactionschema metadata by alias
      description: get transactionschema metadata by alias
      parameters:
        - $ref: '#/components/parameters/transactionSchemaAlias'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                      $ref: '#/components/schemas/TransactionSchemaMetadata'
                  
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
    
  
  /transactionschemas/{transactionSchemaAlias}/step/{stepAlias}/transaction/{transactionId}:
    get:
      security:
        - hashAuth: []
      tags:
        - transactionschemas
      parameters:
        - $ref: '#/components/parameters/transactionId'
        - $ref: '#/components/parameters/stepAlias'
        - $ref: '#/components/parameters/transactionSchemaAlias'
      summary: render a stepschema
      description: renders the schema for a step of a transactionschema to fit the current state of a transaction
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                    $ref: '#/components/schemas/StepSchema'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
      
  
  
  /transactions:
    post: 
      tags: 
        - transactions
      summary: create a transaction
      description: creates a transaction for the given transactionSchema. Returns the created transactionId and the first rendered StepSchema (Inspect Schema to see the variations of StepSchema like StepSchemaAjv).
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Transaction'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  transactionId: 
                    format: Mongo ObjectId
                    example: 507f1f77bcf86cd799439011
                  stepSchema:
                    $ref: '#/components/schemas/StepSchema'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
          
  /transactions/{transactionId}:
    get: 
      security:
        - hashAuth: []
      tags: 
        - transactions
      summary: get a transaction
      description: get a transaction (useful when continuing editing a transaction)
      parameters:
        - $ref: '#/components/parameters/transactionId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                    $ref: '#/components/schemas/Transaction'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
        
          
  
  /transactions/{transactionId}/step/{stepAlias}:
    put:
      security:
        - hashAuth: []
      summary: save transaction step
      description: saves a transaction step and returns the rendered schema for the next step
      tags:
        - transactions
      parameters:
        - $ref: '#/components/parameters/transactionId'
        - $ref: '#/components/parameters/stepAlias'
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              description: object according to the corresponding stepSchema
        
      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/StepSchema'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
          
    get:
      summary: get transaction step
      description: get transaction step
      tags:
        - transactions
      parameters:
        - $ref: '#/components/parameters/transactionId'
        - $ref: '#/components/parameters/stepAlias'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                description: 'object that might confirm to the stepSchema, but might not if changes in previous steps resulted in a change in the stepSchema of this step, but the data was not adjusted yet'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
    
    
  /transactions/{transactionId}/submit:
 
    put:
      security:
        - hashAuth: []
      summary: submit transaction
      description: submits the transaction to the target system and deletes it, if successful
      tags:
        - transactions
      parameters:
        - $ref: '#/components/parameters/transactionId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties:
                  userInputsPdf: 
                    type: string
                    format: base64
                    description: pdf with the user inputs for him/her to download
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
      

  

components:

  responses: 
  
    HealthcheckOK:
      description: Healthcheck successful
      content: 
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                default: OK
      
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              msg: 
                type: string
                example: 'malformed filter expression'
                description: error message
      
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              msg: 
                type: string
                example: 'Internal Server Error'
                description: error message
  
  parameters: 
    transactionId: 
      in: path
      name: transactionId
      required: true
      schema:
        type: string
        format: Mongo ObjectId
        
    stepAlias:
      in: path
      name: stepAlias
      required: true
      schema:
        type: string
        description: alias of the step from the stepschema
        
    transactionSchemaAlias:
      in: path
      name: transactionSchemaAlias
      required: true
      schema:
        type: string
        description: alias of the transactionSchema
    
  
  schemas:
  
    Date:
      type: string
      format: Date
      example: '2023-08-18T13:51:39.462Z'
    
  
    OdatafyCount: 
      type: number
      description: 'number of total query results, regardless of the returned number of documents (useful for pagination)'
  
    ReceiverPublic:
      type: object
      properties:
        _id:
          type: string
          format: Mongo ObjectId
          example: '507f1f77bcf86cd799439011'
        name: 
          type: string
          example: Amt Hüttener Berge
        alias:
          type: string
          description: 'nickname of the receiver to match it with tenants in the target system'
          format: 'lowercase no spaces'
          example: amthb
        logoUrl: 
          type: string
          description: 'URL for the receivers logo to be displayed'
          example: 'https://minio-api.tools.verwaltungscloud.dev/verwaltungscloud-public-assets/LogoDL%20zoom.png'
          
    #Receiver:
    #  allOf: 
    #      - $ref: '#/components/schemas/ReceiverPublic'
    #      - type: object
    #        properties: 
    #          submissionTargetApiBaseUrl: 
    #            type: string
    #            description: Base URL of the API in the target system to# send the final submission t#o
    #            example: https://api.rd-eck.verwaltungscloud.sh/v1
    
    
    TransactionSchemaMetadata: 
      type: object
      properties: 
        _id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
        name: 
          type: string
          example: 'Antrag auf Ermäßigung der Kita-Beiträge (Kurzversion)'
        alias: 
          type: string
          example: 'sozstafkitashort'
        steps:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                format: Mongo ObjectId
                example: 507f1f77bcf86cd799439011
              alias: 
                type: string
                example: 'basedataapplicants'
              name:
                type: string
                example: Grunddaten der Antragssteller
        stepCount:
          type: number
          description: '(max.) number of steps in the transaction'
        iconUrl: 
          type: string 
          description: URL for the transaction icon to be displayed
          example: https://minio-api.tools.verwaltungscloud.dev/verwaltungscloud-public-assets/LogoDL%20zoom.png
          
          
    StepSchema:
      oneOf:
        - $ref: '#/components/schemas/StepSchemaAjv'
        - $ref: '#/components/schemas/StepSchemaFileUpload'
        - $ref: '#/components/schemas/StepSchemaTermsAndConditions'
        - $ref: '#/components/schemas/StepSchemaSubmit'
        
    StepSchemaSubmit:
      type: object
      properties:
        _id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
        name: 
          type: string
          example: Antrag absenden
        alias: 
          type: string
          format: 'lowercase no spaces'
          example: 'submit'
        type: 
          type: string
          example: submit
            
    StepSchemaAjv: 
      type: object
      properties:
        _id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
        name: 
          type: string
          example: Grunddaten der Antragssteller
        alias: 
          type: string
          format: 'lowercase no spaces'
          example: 'basedataapplicants'
        type: 
          type: string
          example: 'ajv'
        ajv:
          type: object
          description: '[ajv schema](https://ajv.js.org/json-schema.html)<br/> [Example](https://github.com/verwaltungscloud/vc-antragsportal-backend/blob/dev/ajvExamples.ts)'
          
          
    
    StepSchemaFileUpload: 
      type: object
      properties:
        _id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
        name: 
          type: string
          example: Einreichung von Nachweisen
        alias: 
          type: string
          format: 'lowercase no spaces'
          example: 'fileupload'
        type: 
          type: string
          example: file_upload
        ajv: 
          type: object
          description: '[ajv schema](https://ajv.js.org/json-schema.html)<br/> [Example](https://github.com/verwaltungscloud/vc-antragsportal-backend/blob/dev/ajvExamples.ts)'
        #requestedFilesHtml: 
        #  type: string
        #  format: html
        #  example: 'Steuererklärung und Hausratversicherungsnachweis'
        #allowedFileExtensions: 
        #  type: array
        #  items:
        #    type: string
        #    example: '.heic'
          
        
          
    StepSchemaTermsAndConditions: 
      type: object
      properties:
        _id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
        name: 
          type: string
          example: Datenschutzhinweise
        alias: 
          type: string
          format: 'lowercase no spaces'
          example: 'dataprivacynote'
        type: 
          type: string
          example: terms_and_conditions
        ajv:
          type: object
          description: '[ajv schema](https://ajv.js.org/json-schema.html)<br/> [Example](https://github.com/verwaltungscloud/vc-antragsportal-backend/blob/dev/ajvExamples.ts)'
        
          
    Transaction:
      type: object
      properties:
        _id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
        transactionSchemaAlias: 
          type: string
          example: sozstafkitashort
          description: reference to the schema of the transaction
        applicant:
          type: object
          properties:
            firstName: 
              type: string
              example: Peter
            lastName: 
              type: string
              example: Lustig
            dateOfBirth: 
              type: string 
              format: 'Date'
              example: '2003-01-10'
            email: 
              type: string
              example: 'peter@lustig.de'
            createdAt:
              $ref: '#/components/schemas/Date'
            updatedAt: 
              $ref: '#/components/schemas/Date'
            
  securitySchemes:
    hashAuth:
      type: http
      scheme: bearer
      description: 'SHA-256 Hash (10 Salts) of firstName, lastName, dateOfBirth(yyyy-mm-dd) of the applicant that created the transaction concatenated in that order without spaces. Example: Hash("PeterLustig2000-02-01")'
          