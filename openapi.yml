openapi: 3.0.3
info:
  title: Verwaltungscloud Antragsportal
  description: |-
    Das Verwaltungscloud Antragsportal ermöglicht das Stellen von Onlineanträgen für integrierte Fachverfahren.
    
  contact:
    email: info@verwaltungscloud.sh
  version: 0.0.1

servers:
  - url: https://api.antrag.dev.verwaltungs.cloud/v1
tags:
  - name: health
    description: Healthchecks
    
  - name: receivers
    description: application receiving entities
    
  - name: transactionschemas
    description: schemas for transactions
    
  - name: transactions
    description: transactions
    
paths:
  # healthchecks
  /health:
    get: 
      tags:
        - health
      summary: Healthcheck on the Backend Service
      operationId: getHealth
      responses:
        200:
          $ref: '#/components/responses/HealthcheckOK'
          
  /health/mongodbconnection:
    get: 
      tags:
        - health
      summary: Healthcheck on the MongoDB Connection
      description: checks if the backend service is connected to the MongoDB
      operationId: getHealthMongoDB
      responses:
        200:
          $ref: '#/components/responses/HealthcheckOK'
  
  /health/gotenberg:
    get: 
      tags:
        - health
      summary: Healthcheck on the Gotenberg Service
      description: check if the Gotenberg service (PDF rendering engine) is up and reachable
      operationId: getHealthGotenberg
      responses:
        200:
          $ref: '#/components/responses/HealthcheckOK'
          

  # receivers
  /receivers:
    get: 
      tags: 
        - receivers
      summary: query receivers (odatafy enabled)
      description: Queries receivers.<br>Route is odatafy compatible. <br>Documentation and examples can be found <a href=http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_QueryOptions>here</a>.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Receiver'
                  count: 
                    $ref: '#/components/schemas/OdatafyCount'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
          

  /transactionschemas:
    get: 
      tags: 
        - transactionschemas
      summary: query transactionschemas (odatafy enabled)
      description: Queries transactionschemas.<br>Route is odatafy compatible. <br>Documentation and examples can be found <a href=http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_QueryOptions>here</a>.
      parameters:
        - in: query
          name: receiver
          required: false
          schema:
            type: string
            format: receiveralias
            description: filters transactionschemas by the presence of the specified receiveralias in the receivers array (currently not supported by odatafy)
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransactionSchema'
                  count: 
                    $ref: '#/components/schemas/OdatafyCount'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
          
  /transactionschemas/alias/{transactionSchemaAlias}:
    get: 
      tags: 
        - transactionschemas
      summary: get transactionschema  by alias
      description: get transactionschema  by alias
      parameters:
        - $ref: '#/components/parameters/transactionSchemaAlias'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                      $ref: '#/components/schemas/TransactionSchema'
                  
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
    
  
  /transactionschemas/alias/{transactionSchemaAlias}/step/{stepSchemaAlias}/transaction/{transactionId}:
    get:
      security:
        - hashAuth: []
      tags:
        - transactionschemas
      parameters:
        - $ref: '#/components/parameters/transactionId'
        - $ref: '#/components/parameters/stepSchemaAlias'
        - $ref: '#/components/parameters/transactionSchemaAlias'
        - $ref: '#/components/parameters/skipMode'
      summary: render a stepschema
      description: renders the schema for a step of a transactionschema to fit the current state of a transaction.<br/> If the step is unnecessary and therefore skipped, the route returns the next necessary step in the direction specified in the query param.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                    $ref: '#/components/schemas/StepSchema'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
      
  
  
  /transactions:
    post: 
      tags: 
        - transactions
      summary: create a transaction
      description: creates a transaction for the given transactionSchema. Returns the created transactionId and the first rendered StepSchema (Inspect Schema to see the variations of StepSchema like StepSchemaAjv).
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Transaction'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  transactionId: 
                    format: Mongo ObjectId
                    example: 507f1f77bcf86cd799439011
                  firstStepSchema:
                    $ref: '#/components/schemas/StepSchema'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
          
  /transactions/{transactionId}:
    get: 
      security:
        - hashAuth: []
      tags: 
        - transactions
      summary: get a transaction
      description: get a transaction (useful when continuing editing a transaction)
      parameters:
        - $ref: '#/components/parameters/transactionId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                    $ref: '#/components/schemas/Transaction'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
        
          
  
  /transactions/{transactionId}/step/{stepSchemaAlias}:
    put:
      security:
        - hashAuth: []
      summary: save transaction step
      description: saves a transaction step and returns the rendered schema for the next step.<br/> If the nexstep is unnecessary and therefore skipped, the route returns the next necessary step instead.
      tags:
        - transactions
      parameters:
        - $ref: '#/components/parameters/transactionId'
        - $ref: '#/components/parameters/stepSchemaAlias'
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              description: object according to the corresponding stepSchema
        
      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/StepSchema'
        400:
          $ref: '#/components/responses/BadRequest'
        406: 
          description: 'No data shall be saved for this step. This can be due to the step being skipped or the step being submit.'
        500:
          $ref: '#/components/responses/InternalServerError'
        
          
    get:
      summary: get transaction step data
      description: get transaction step data
      tags:
        - transactions
      parameters:
        - $ref: '#/components/parameters/transactionId'
        - $ref: '#/components/parameters/stepSchemaAlias'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                description: 'object that might confirm to the stepSchema, but might not if changes in previous steps resulted in a change in the stepSchema of this step, but the data was not adjusted yet'
        400:
          $ref: '#/components/responses/BadRequest'
        404: 
          description: StepSchemaAlias was not found in TransactionSchema and therefore is invalid.
        409:
          description: 'No Data found for this step, but the StepSchemaAlias is valid. This might mean that the step was previously skipped or that no data was saved yet'
        500:
          $ref: '#/components/responses/InternalServerError'
    
    
  /transactions/{transactionId}/submit:
 
    put:
      deprecated: true
      security:
        - hashAuth: []
      summary: submit transaction
      description: submits the transaction to the target system and deletes it, if successful
      tags:
        - transactions
      parameters:
        - $ref: '#/components/parameters/transactionId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                type: object
                properties:
                  userInputsPdf: 
                    type: string
                    format: base64
                    description: pdf with the user inputs for him/her to download
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
      

  

components:

  responses: 
  
    HealthcheckOK:
      description: Healthcheck successful
      content: 
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                default: OK
      
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              msg: 
                type: string
                example: 'malformed filter expression'
                description: error message
      
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              msg: 
                type: string
                example: 'Internal Server Error'
                description: error message
  
  
  parameters: 
    transactionId: 
      in: path
      name: transactionId
      required: true
      schema:
        type: string
        format: Mongo ObjectId
        
    stepSchemaAlias:
      in: path
      name: stepSchemaAlias
      required: true
      schema:
        type: string
        description: alias of the step from the stepschema
        
    transactionSchemaAlias:
      in: path
      name: transactionSchemaAlias
      required: true
      schema:
        type: string
        description: alias of the transactionSchema
    
    skipMode:
      in: query
      name: skipMode
      required: false
      schema:
        type: string
        enum: ['next','previous']
        default: 'next'
        description: if the requested step is skipped, the backend will return the next / previous step instead
    
  
  schemas:
  
    Date:
      type: string
      format: Date
      example: '2023-08-18T13:51:39.462Z'
    
  
    OdatafyCount: 
      type: number
      description: 'number of total query results, regardless of the returned number of documents (useful for pagination)'
  
    Receiver:
      type: object
      properties:
        _id:
          type: string
          format: Mongo ObjectId
          example: '507f1f77bcf86cd799439011'
        name: 
          type: string
          example: Amt Hüttener Berge
        alias:
          type: string
          description: 'nickname of the receiver to match it with tenants in the target system'
          format: 'lowercase no spaces'
          example: amthb
        logoUrl: 
          type: string
          description: 'URL for the receivers logo to be displayed'
          example: 'https://minio-api.tools.verwaltungscloud.dev/verwaltungscloud-public-assets/LogoDL%20zoom.png'
      required: 
        - id
        - name
        - alias
        - logoUrl
        
    
    
    TransactionSchema: 
      type: object
      properties: 
        _id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
        name: 
          type: string
          example: 'Antrag auf Ermäßigung der Kita-Beiträge (Kurzversion)'
        alias: 
          type: string
          example: 'sozstafkitashort'
        receivers:
          type: array
          items:
            type: string
            format: receiverAlias
            
        
          
          
    StepSchema:
      oneOf:
        - $ref: '#/components/schemas/StepSchemaAjv'
        - $ref: '#/components/schemas/StepSchemaFileUpload'
        - $ref: '#/components/schemas/StepSchemaTermsAndConditions'
        - $ref: '#/components/schemas/StepSchemaSubmit'
        
    StepSchemaSubmit:
      type: object
      properties:
        _id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
        stepName: 
          type: string
          example: Antrag absenden
        stepSchemaAlias: 
          type: string
          format: 'lowercase no spaces'
          example: 'submit'
        type: 
          type: string
          example: submit
        targetSystemSubmitURL: 
          type: string
          description:  URL of the target system to send the final submission to (handled by backend)
          example: https://api.rd-eck.verwaltungscloud.sh/v1/ozg/submit
        
            
    StepSchemaAjv: 
      type: object
      properties:
        _id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
        stepName: 
          type: string
          example: Grunddaten der Antragssteller
        stepSchemaAlias: 
          type: string
          format: 'lowercase no spaces'
          example: 'basedataapplicants'
        type: 
          type: string
          example: 'ajv'
        ajv:
          type: object
          description: '[ajv schema](https://ajv.js.org/json-schema.html)<br/> [Example](https://github.com/verwaltungscloud/vc-antragsportal-backend/blob/dev/ajvExamples.ts)'
        renderingStrategy:   
          type: string
          format: stepSchemaRenderingStrategyName
          example: strategy to render the stepschema
          
          
    
    StepSchemaFileUpload: 
      type: object
      properties:
        _id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
        stepName: 
          type: string
          example: Einreichung von Nachweisen
        stepSchemaAlias: 
          type: string
          format: 'lowercase no spaces'
          example: 'fileupload'
        type: 
          type: string
          example: file_upload
        ajv: 
          type: object
          description: '[ajv schema](https://ajv.js.org/json-schema.html)<br/> [Example](https://github.com/verwaltungscloud/vc-antragsportal-backend/blob/dev/ajvExamples.ts)'

          
        
          
    StepSchemaTermsAndConditions: 
      type: object
      properties:
        _id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
        stepName: 
          type: string
          example: Datenschutzhinweise
        stepSchemaAlias: 
          type: string
          format: 'lowercase no spaces'
          example: 'dataprivacynote'
        type: 
          type: string
          example: terms_and_conditions
        ajv:
          type: object
          description: '[ajv schema](https://ajv.js.org/json-schema.html)<br/> [Example](https://github.com/verwaltungscloud/vc-antragsportal-backend/blob/dev/ajvExamples.ts)'

        
          
    Transaction:
      type: object
      properties:
        _id:
          type: string
          format: Mongo ObjectId
          example: 507f1f77bcf86cd799439011
        transactionSchemaAlias: 
          type: string
          example: sozstafkitashort
          description: reference to the schema of the transaction
        applicant:
          type: object
          properties:
            firstName: 
              type: string
              example: Peter
            lastName: 
              type: string
              example: Lustig
            dateOfBirth: 
              type: string 
              format: 'Date'
              example: '2003-01-10'
            email: 
              type: string
              example: 'peter@lustig.de'
            createdAt:
              $ref: '#/components/schemas/Date'
            updatedAt: 
              $ref: '#/components/schemas/Date'
            
  securitySchemes:
    hashAuth:
      type: http
      scheme: bearer
      description: 'Bcrypt Hash (10 Salts) of firstName, lastName, dateOfBirth.toIsoString() of the applicant that created the transaction concatenated in that order without spaces. Example: Hash("PeterLustig2000-01-02T00:00:00.000Z")'
          